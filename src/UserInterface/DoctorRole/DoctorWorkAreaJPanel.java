/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UserInterface.DoctorRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.CareTeamOrganization;
import Business.Organization.DoctorOrganization;
import Business.Organization.OperatingRoomOrganization;
import Business.Organization.Organization;
import Business.Schedule.DeviceBookingHistory;
import Business.Supplier.MedicalDevice;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.SurgeryOperationWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nirav gupta
 */
public class DoctorWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    JPanel userProcessContainer;
    UserAccount account;
    Organization organization;
    Enterprise enterprise;
    EcoSystem system;
    
    public DoctorWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization,Enterprise enterprise, EcoSystem system) {
        initComponents();
        
        this.userProcessContainer=userProcessContainer;
        this.account=account;
        this.organization=organization;
        this.enterprise=enterprise;
        this.system=system;
        populateRequestTable();
    }

    public void populateRequestTable(){
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        
        model.setRowCount(0);
       
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (org instanceof DoctorOrganization) {
                for (WorkRequest request : org.getWorkQueue().getWorkRequestList()) {
                    Object[] row = new Object[7];
                    row[0] = request;
                    row[1] = request.getRequestDate();
                    row[2] = ((SurgeryOperationWorkRequest) request).getOperationDate();
                    row[3] = ((SurgeryOperationWorkRequest) request).getAllotedOperatingRoom();
                    row[4] = ((SurgeryOperationWorkRequest) request).getAssignedTeamSize();
                    row[5] = ((SurgeryOperationWorkRequest) request).getAssignedMedicalDeviceType();
                    row[6] = request.getStatus();
                    model.addRow(row);
                }
            }
        }


    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        createSurgeryRequestjButton1 = new javax.swing.JButton();
        putSurgeryRequestinProgressjButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        closeSurgeryRequestjButton1 = new javax.swing.JButton();
        refreshjButton1 = new javax.swing.JButton();
        reportDeviceFailurejButton1 = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("DOCTOR WORK AREA");

        createSurgeryRequestjButton1.setBackground(new java.awt.Color(102, 204, 255));
        createSurgeryRequestjButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        createSurgeryRequestjButton1.setText("Create Surgery Request >>");
        createSurgeryRequestjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createSurgeryRequestjButton1ActionPerformed(evt);
            }
        });

        putSurgeryRequestinProgressjButton2.setBackground(new java.awt.Color(102, 204, 255));
        putSurgeryRequestinProgressjButton2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        putSurgeryRequestinProgressjButton2.setText("Put Surgery Request in progress");
        putSurgeryRequestinProgressjButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                putSurgeryRequestinProgressjButton2ActionPerformed(evt);
            }
        });

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Request Date", "Operation Date", "Alloted Room", "Assigned Team Size", "Assigned Device", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        closeSurgeryRequestjButton1.setBackground(new java.awt.Color(102, 204, 255));
        closeSurgeryRequestjButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        closeSurgeryRequestjButton1.setText("Close Surgery Request");
        closeSurgeryRequestjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeSurgeryRequestjButton1ActionPerformed(evt);
            }
        });

        refreshjButton1.setText("Refresh");
        refreshjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshjButton1ActionPerformed(evt);
            }
        });

        reportDeviceFailurejButton1.setBackground(new java.awt.Color(153, 153, 255));
        reportDeviceFailurejButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        reportDeviceFailurejButton1.setText("Report Device Failure >>");
        reportDeviceFailurejButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportDeviceFailurejButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(closeSurgeryRequestjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(reportDeviceFailurejButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(putSurgeryRequestinProgressjButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(createSurgeryRequestjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 712, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(194, 194, 194)
                        .addComponent(refreshjButton1)
                        .addGap(47, 47, 47)))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(refreshjButton1))
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(putSurgeryRequestinProgressjButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createSurgeryRequestjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeSurgeryRequestjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reportDeviceFailurejButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(168, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createSurgeryRequestjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createSurgeryRequestjButton1ActionPerformed
        CreateSurgeryOperationRequestJPanel mpcjp = new CreateSurgeryOperationRequestJPanel(userProcessContainer,enterprise,organization, account, system);
        userProcessContainer.add("ManageProductCatalogJPanel",mpcjp);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_createSurgeryRequestjButton1ActionPerformed

    private void refreshjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshjButton1ActionPerformed
        populateRequestTable();
    }//GEN-LAST:event_refreshjButton1ActionPerformed

    private void putSurgeryRequestinProgressjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_putSurgeryRequestinProgressjButton2ActionPerformed
        int selectedRequest = workRequestJTable.getSelectedRow();
        
        if (selectedRequest < 0 ){
            JOptionPane.showMessageDialog(null, "Please select a row from request table");
            return;
        }
        
        WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRequest, 0);
      
        if(request.getMessage().equalsIgnoreCase("OPERATION IN PROGRESS")){
            JOptionPane.showMessageDialog(null, "ERROR: Operation already in progress!! ");
            return;
        }
        
        if (((SurgeryOperationWorkRequest) request).getAssignedMedicalDevice() == null || 
                ((SurgeryOperationWorkRequest) request).getAllotedOperatingRoom() == null || 
                ((SurgeryOperationWorkRequest) request).getRequiredCareTeamSize() != 0){
           
            JOptionPane.showMessageDialog(null, "The request is not assigned all requested infra and staff to put in progress !!!");
            
                return;
            
        }
        else if (((SurgeryOperationWorkRequest) request).getAssignedMedicalDevice() == null || 
                ((SurgeryOperationWorkRequest) request).getAllotedOperatingRoom() == null || 
                ((SurgeryOperationWorkRequest) request).getRequiredCareTeamSize() == 0) {
            JOptionPane.showMessageDialog(null, "This request is resolved!");
        }
        request.setStatus("OPERATION IN PROGRESS");
        request.setMessage("OPERATION IN PROGRESS");
        JOptionPane.showMessageDialog(null, "OPERATION PUT IN PROGRESS");
    }//GEN-LAST:event_putSurgeryRequestinProgressjButton2ActionPerformed

    private void closeSurgeryRequestjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeSurgeryRequestjButton1ActionPerformed
        int selectedRequest = workRequestJTable.getSelectedRow();
        
        if (selectedRequest < 0 ){
            JOptionPane.showMessageDialog(null, "Please select a row from request table");
            return;
        }
        
        WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRequest, 0);
        
        int reply = JOptionPane.showConfirmDialog(null, "ARE YOU SURE TO CLOSE REQUEST???", "!!! CLOSE REQUEST !!!", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (org instanceof CareTeamOrganization || org instanceof DoctorOrganization || org instanceof OperatingRoomOrganization) {
                    org.getWorkQueue().getWorkRequestList().remove(request);
                    account.getWorkQueue().getWorkRequestList().remove(request);
                    
                }
            }
            JOptionPane.showMessageDialog(null, "Request Closed");
        }
        
        
        
        //setting device usage count to evaluate device failure probability
//        if (((SurgeryOperationWorkRequest) request).getAssignedMedicalDevice() != null) {
//            for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
//                if (org instanceof CareTeamOrganization) {
//                    CareTeamOrganization cto = (CareTeamOrganization) org;
//                    for (MedicalDevice medDev : cto.getMedicalDeviceCatalog().getProductCatalog()) {
//                        if (medDev.getDeviceName().equalsIgnoreCase(((SurgeryOperationWorkRequest) request).getAssignedMedicalDevice().getDeviceName())) {
//                            if (medDev.getDeviceID() == ((SurgeryOperationWorkRequest) request).getAssignedMedicalDevice().getDeviceID()) {
//                                
//                                medDev.setDeviceUsageCount(medDev.getDeviceUsageCount() + 1);
//                                ((SurgeryOperationWorkRequest) request).getAssignedMedicalDevice().setDeviceUsageCount(((SurgeryOperationWorkRequest) request).getAssignedMedicalDevice().getDeviceUsageCount() + 1);
//                                
////                                medDev.setNextScheduledBookingDate(medDev.getBookingHistorylist().get(0).getPreviousScheduledBookingDate());                                
////                                medDev.setNextScheduledBookingTillDate(medDev.getBookingHistorylist().get(0).getPreviousScheduledBookingTillDate());
//                              
//                                System.out.println(medDev.getDeviceUsageCount());
//                            }
//                        }
//                    }
//                }
//            }
//        }
    }//GEN-LAST:event_closeSurgeryRequestjButton1ActionPerformed

    private void reportDeviceFailurejButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportDeviceFailurejButton1ActionPerformed
        int selectedRequest = workRequestJTable.getSelectedRow();
        
        if (selectedRequest < 0 ){
            JOptionPane.showMessageDialog(null, "Please select a request from request table");
            return;
        }
        
        WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRequest, 0);
        
        if (((SurgeryOperationWorkRequest) request).getAssignedMedicalDevice() == null){
            JOptionPane.showMessageDialog(null, "No device assigned for request to report failure !!!");
            return;
        }
        
        ReportFailureJPanel rep = new ReportFailureJPanel(userProcessContainer,enterprise,organization, account, system, ((SurgeryOperationWorkRequest) request).getAssignedMedicalDevice(),request);
        userProcessContainer.add("rep",rep);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_reportDeviceFailurejButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeSurgeryRequestjButton1;
    private javax.swing.JButton createSurgeryRequestjButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton putSurgeryRequestinProgressjButton2;
    private javax.swing.JButton refreshjButton1;
    private javax.swing.JButton reportDeviceFailurejButton1;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
