/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UserInterface.SupplierRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.SupplierEnterprise;
import Business.Enterprise.WarehouseEnterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.SupplierOrganization;
import Business.Organization.WarehouseOrganization;
import Business.Schedule.DeviceBookingHistory;
import Business.Supplier.MedicalDevice;
import Business.Supplier.Supplier;
import Business.WorkQueue.MaintenanceWorkRequest;
import Business.WorkQueue.SurgeryOperationWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nirav gupta
 */
public class ManageDeviceMaintainenceJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageDeviceMaintainenceJPanel
     */
    JPanel userProcessContainer;
    Supplier supplier;
    EcoSystem system;
    Organization organization;
    Enterprise enterprise;
    
    public ManageDeviceMaintainenceJPanel(JPanel userProcessContainer, Supplier supplier, Enterprise enterprise, Organization organization, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
       this.system=system;
       this.enterprise=enterprise;
       this.organization=organization;
       this.supplier=supplier;
       populateRequestTable();
       
    }

     public void populateRequestTable(){
            DefaultTableModel model = (DefaultTableModel) deviceRequestjTable1.getModel();
            model.setRowCount(0);

            for (Network n : system.getNetworkList()) {
             for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                 if (e instanceof SupplierEnterprise) {
                     for (Organization org : e.getOrganizationDirectory().getOrganizationList()) {
                         if (org instanceof SupplierOrganization) {
                             SupplierOrganization sporg = (SupplierOrganization) org;
                             for (Supplier s : sporg.getSupplierDirectory().getSupplierDict()) {
                                 if (s.getSupplyName().equalsIgnoreCase(supplier.getSupplyName())) {
                                     for (WorkRequest request : org.getWorkQueue().getWorkRequestList()) {
                                         if (request instanceof MaintenanceWorkRequest) {
                                             Object[] row = new Object[9];
                                             row[0] = request;
                                             row[1] = request.getRequestDate();
                                             row[2] = request.getStatus();
                                             row[3] = ((MaintenanceWorkRequest) request).getRequestedDevice().getDeviceName();
                                             row[4] = ((MaintenanceWorkRequest) request).getRequestedDevice().getDeviceType();
                                             row[5] = ((MaintenanceWorkRequest) request).getRequestedDevice().getCurrentLocation();
                                             row[6] = ((MaintenanceWorkRequest) request).getRequestedDevice().getDeviceStatus();
                                             row[7] = ((MaintenanceWorkRequest) request).getRequestedDevice().getNextMaitainenceDueDate();
                                             row[8] = ((MaintenanceWorkRequest) request).getMaintanenceStatus();
                                             model.addRow(row);
                                         }
                                     }
                                 }
                             }
                         }
                     }
                 }
             }
         }
     }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        deviceRequestjTable1 = new javax.swing.JTable();
        completeDeviceMaintenancejButton1 = new javax.swing.JButton();
        putDeviceInMaintenancejButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        nextMaintenancejDateChooser1 = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        backButton2 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        failureFixCommentjTextField1 = new javax.swing.JTextField();

        jLabel1.setText("MANAGE DEVICE MAINTAINENCE");

        deviceRequestjTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Date", "Request Status", "Device Name", "Type", "Current Location", "Device Status", "Next Maintainence Date", "Maitanence Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(deviceRequestjTable1);

        completeDeviceMaintenancejButton1.setBackground(new java.awt.Color(0, 255, 255));
        completeDeviceMaintenancejButton1.setText("Complete Device Maintenance");
        completeDeviceMaintenancejButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeDeviceMaintenancejButton1ActionPerformed(evt);
            }
        });

        putDeviceInMaintenancejButton1.setBackground(new java.awt.Color(0, 255, 255));
        putDeviceInMaintenancejButton1.setText("Put Device in Maintanence");
        putDeviceInMaintenancejButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                putDeviceInMaintenancejButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Next Maintenance date:");

        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        backButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        backButton2.setText("<< Back");
        backButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButton2ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(102, 255, 204));
        jButton2.setText("Failure Fix Comment");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 746, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(295, 295, 295)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(106, 106, 106)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(81, 81, 81)
                                .addComponent(putDeviceInMaintenancejButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(backButton2)))
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(completeDeviceMaintenancejButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(nextMaintenancejDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(failureFixCommentjTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(completeDeviceMaintenancejButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(putDeviceInMaintenancejButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(nextMaintenancejDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton2)
                    .addComponent(jButton2)
                    .addComponent(failureFixCommentjTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void completeDeviceMaintenancejButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeDeviceMaintenancejButton1ActionPerformed
        int selectedRequest = deviceRequestjTable1.getSelectedRow();
        
        Date date = new Date();
        
        if (selectedRequest < 0){
            JOptionPane.showMessageDialog(null, "Please select a row from device table");
            return;
        }
        
        WorkRequest request = (WorkRequest)deviceRequestjTable1.getValueAt(selectedRequest, 0);
        MaintenanceWorkRequest maintWrkReq = (MaintenanceWorkRequest) request;
                
        if ((maintWrkReq.getMaintanenceStatus().equalsIgnoreCase("Pending"))){
            JOptionPane.showMessageDialog(null, "ERROR: Please first put the device in Maintenance !!!");
            return;
        }
        
        if ((maintWrkReq.getMessage().equalsIgnoreCase("Completed"))){
            JOptionPane.showMessageDialog(null, "ERROR: Maintenance already completed !!!");
            return;
        }
        
        if (nextMaintenancejDateChooser1.getDate() == null){
            JOptionPane.showMessageDialog(null, "ERROR: Please enter next maintenance date");
            return;
        }
        
        if (nextMaintenancejDateChooser1.getDate().before(date)){
            JOptionPane.showMessageDialog(null, "ERROR: Next maintenance date cannot be before current date");
        }
        
        if (maintWrkReq.getMessage().equalsIgnoreCase("Completed")){
            JOptionPane.showMessageDialog(null, "ERROR: Maintenance already completed!! ");
            return;
        }
        
        if(failureFixCommentjTextField1.getText().isEmpty()==true || failureFixCommentjTextField1.getText().startsWith(" ")) {
            JOptionPane.showMessageDialog(null, "Please enter valid comment in failure fix comment");
            return;
        }
        
        
        Date date2 = nextMaintenancejDateChooser1.getDate();
        Calendar cal = Calendar.getInstance();
        cal.setTime(date2);
        cal.set(Calendar.DATE, Calendar.DATE - 60);
        date2 = cal.getTime();
        if (date.compareTo(date2) > 0) {
           JOptionPane.showMessageDialog(null, "WARNING: Please input next maintenance date more than 60days from current date!!");
            return; 
        }
        
        //maintWrkReq.getRequestedDevice().setDeviceStatus(MedicalDevice.devicebookedStatusType.AVAILABLE.getValue());
        maintWrkReq.setMessage("Completed");
        maintWrkReq.setStatus("Resolved");
        maintWrkReq.setMaintanenceStatus("Completed");
        maintWrkReq.getRequestedDevice().setDeviceStatus((MedicalDevice.devicebookedStatusType.INSHIPPING.getValue()));
        
        
            for (Network n : system.getNetworkList()) {
                for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e instanceof WarehouseEnterprise) {
                        for (Organization org : e.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof WarehouseOrganization) {
                                WarehouseOrganization wareOrg = (WarehouseOrganization) org;
                                MedicalDevice md1 = wareOrg.getMedicalDeviceCatalog().addProduct();
                        
                                md1.setDeviceName(maintWrkReq.getRequestedDevice().getDeviceName());
                                md1.setDeviceType(maintWrkReq.getRequestedDevice().getDeviceType());
                                md1.setModelNumber(maintWrkReq.getRequestedDevice().getModelNumber());
                                md1.setPurchaseCost(maintWrkReq.getRequestedDevice().getPurchaseCost());                        
                                md1.setManufactureDate(maintWrkReq.getRequestedDevice().getManufactureDate());
                                md1.setNextMaitainenceDueDate(nextMaintenancejDateChooser1.getDate());
                                md1.setWarrantyExpirationDate(maintWrkReq.getRequestedDevice().getWarrantyExpirationDate());
                                md1.setCurrentLocation(e.getName());
                                md1.setDeviceID(maintWrkReq.getRequestedDevice().getDeviceID());
                                md1.setDeviceFailureList(maintWrkReq.getRequestedDevice().getDeviceFailureList());
                                md1.setDeviceUsageCount(maintWrkReq.getRequestedDevice().getDeviceUsageCount());
                                md1.setFailureProbablility(maintWrkReq.getRequestedDevice().getFailureProbablility());
                                md1.setFailureCount(maintWrkReq.getRequestedDevice().getFailureCount());
                                md1.setAvailability(maintWrkReq.getRequestedDevice().getAvailability());
                                md1.setPurchaseDate(maintWrkReq.getRequestedDevice().getPurchaseDate());
                                maintWrkReq.getRequestedDevice().setNextMaitainenceDueDate(nextMaintenancejDateChooser1.getDate());
                                md1.setPreviousMaitainenceDate(date);
                                md1.setDeviceStatus((MedicalDevice.devicebookedStatusType.INSHIPPING.getValue()));
                                maintWrkReq.getRequestedDevice().setCurrentLocation(e.getName());
                                maintWrkReq.getRequestedDevice().setPreviousMaitainenceDate(date);
                                JOptionPane.showMessageDialog(null, "Device Maintenance Completed");
                                md1.setBookingHistorylist(maintWrkReq.getRequestedDevice().getBookingHistorylist());
                                
                                for (DeviceBookingHistory dbh : md1.getBookingHistorylist()){
                                    dbh.setFailureFixedMessage(failureFixCommentjTextField1.getText());
                                    dbh.setFailureFixedValue(true);
                                }
                            }
                        }
                    }
                }
            }
        populateRequestTable();
        //maintWrkReq.getRequestedDevice().setCurrentLocation(Enterprise.EnterpriseType.WareHouse.getValue);
        
    }//GEN-LAST:event_completeDeviceMaintenancejButton1ActionPerformed

    private void putDeviceInMaintenancejButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_putDeviceInMaintenancejButton1ActionPerformed
        int selectedRequest = deviceRequestjTable1.getSelectedRow();
        
        if (selectedRequest < 0){
            JOptionPane.showMessageDialog(null, "Please select a row from device table");
            return;
        }
        
        WorkRequest request = (WorkRequest)deviceRequestjTable1.getValueAt(selectedRequest, 0);
        
        MaintenanceWorkRequest maintWrkReq = (MaintenanceWorkRequest) request;
        
        if (maintWrkReq.getMessage().equalsIgnoreCase("Completed")){
            JOptionPane.showMessageDialog(null, "ERROR: Maintenance already completed!! ");
            return;
        }
        
        if (maintWrkReq.getMessage().equalsIgnoreCase("Maintenance In Progress")){
            JOptionPane.showMessageDialog(null, "ERROR: Maintenance already in progress!! ");
            return;
        }
        
        maintWrkReq.getRequestedDevice().setCurrentLocation(enterprise.getName());
        maintWrkReq.setMessage("Maintenance In Progress");
        maintWrkReq.setMaintanenceStatus("Maintenance In Progress");
        
        JOptionPane.showMessageDialog(null, "Device put in Maintenance");
    }//GEN-LAST:event_putDeviceInMaintenancejButton1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        populateRequestTable();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void backButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButton2ActionPerformed
         userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton2;
    private javax.swing.JButton completeDeviceMaintenancejButton1;
    private javax.swing.JTable deviceRequestjTable1;
    private javax.swing.JTextField failureFixCommentjTextField1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser nextMaintenancejDateChooser1;
    private javax.swing.JButton putDeviceInMaintenancejButton1;
    // End of variables declaration//GEN-END:variables
}
