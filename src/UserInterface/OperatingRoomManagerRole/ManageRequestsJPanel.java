/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UserInterface.OperatingRoomManagerRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Network.Network;
import Business.OperatingRoom.OperatingRoom;
import Business.OperatingRoom.RoomBookingHistory;
import Business.Organization.OperatingRoomOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.SurgeryOperationWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nirav gupta
 */
public class ManageRequestsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageRequestsJPanel
     */
    JPanel userProcessContainer;
    UserAccount account; 
    EcoSystem system;
    Enterprise enterprise;
    
    public ManageRequestsJPanel(JPanel userProcessContainer, UserAccount account, Enterprise enterprise, EcoSystem system) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.account=account;
        this.system=system;
        this.enterprise=enterprise;
        populateRequestTable();
        populateOperatingRoomTable();
    }

    

    
    public void populateRequestTable(){
            DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
            model.setRowCount(0);

        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (org instanceof OperatingRoomOrganization) {
                for (WorkRequest request : org.getWorkQueue().getWorkRequestList()) {
                    Object[] row = new Object[5];
                    row[0] = request;
                    row[1] = request.getSender();
                    row[2] = request.getRequestDate();
                    row[3] = request.getStatus();
                    row[4] = ((SurgeryOperationWorkRequest) request).getAllotedOperatingRoom();
                    model.addRow(row);
                }
            }
        }
    }

    
    
    public void populateOperatingRoomTable(){
        
        DefaultTableModel model = (DefaultTableModel) operatingRoomjTable1.getModel();
        model.setRowCount(0);
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (org instanceof OperatingRoomOrganization) {
                OperatingRoomOrganization oro = (OperatingRoomOrganization) org;
                for (OperatingRoom opm : oro.getOperatingRoomList()) {
                    Object[] row = new Object[6];
                    row[0] = opm;
                    row[1] = opm.getRoomNo();
                    row[2] = opm.getBookedForDoctor();
                    row[3] = opm.getBookedForDoctor();
                    row[4] = opm.getBookedForOperationType();
                    row[5] = opm.getBookedStatus();
                    model.addRow(row);
                }
            }
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        refreshjButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        operatingRoomjTable1 = new javax.swing.JTable();
        assignOperatingRoomjButton1 = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Doctor Name", "Request Date", "Status", "Alloted Room No"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(3).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(4).setResizable(false);
        }

        refreshjButton1.setText("Refresh");
        refreshjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshjButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("MANAGE REQUESTS ");

        operatingRoomjTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room Name", "Room no", "Booked For Date", "For Doctor", "For Operation", "Booked Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(operatingRoomjTable1);
        if (operatingRoomjTable1.getColumnModel().getColumnCount() > 0) {
            operatingRoomjTable1.getColumnModel().getColumn(0).setResizable(false);
            operatingRoomjTable1.getColumnModel().getColumn(1).setResizable(false);
            operatingRoomjTable1.getColumnModel().getColumn(2).setResizable(false);
            operatingRoomjTable1.getColumnModel().getColumn(3).setResizable(false);
            operatingRoomjTable1.getColumnModel().getColumn(5).setResizable(false);
        }

        assignOperatingRoomjButton1.setBackground(new java.awt.Color(0, 204, 204));
        assignOperatingRoomjButton1.setText("Assign Operating Room for Operation");
        assignOperatingRoomjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignOperatingRoomjButton1ActionPerformed(evt);
            }
        });

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(283, 283, 283)
                        .addComponent(jLabel1)
                        .addGap(105, 105, 105)
                        .addComponent(refreshjButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(204, 204, 204)
                        .addComponent(assignOperatingRoomjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(backJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 599, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshjButton1)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(assignOperatingRoomjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(backJButton)
                .addGap(28, 28, 28))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshjButton1ActionPerformed
        populateRequestTable();
        populateOperatingRoomTable();
    }//GEN-LAST:event_refreshjButton1ActionPerformed

    private void assignOperatingRoomjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignOperatingRoomjButton1ActionPerformed
        
        int selectedRequest = workRequestJTable.getSelectedRow();
        int selectedRoom = operatingRoomjTable1.getSelectedRow();
        
        if (selectedRequest < 0 || selectedRoom < 0){
            JOptionPane.showMessageDialog(null, "Please select a row from both Request and room table");
            return;
        }
        
        WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRequest, 0);
        OperatingRoom room = (OperatingRoom) operatingRoomjTable1.getValueAt(selectedRoom, 0);
        
        if(((SurgeryOperationWorkRequest) request).getAllotedOperatingRoom()!=null) {
            JOptionPane.showMessageDialog(null, "Request already has room allotted");
            return;
        }
        
        if (room.getBookingHistorylist()!=null){
        for (RoomBookingHistory rh : room.getBookingHistorylist()){
            if (rh.getPreviousScheduledBookingDate().equals(((SurgeryOperationWorkRequest)request).getOperationDate())){
                JOptionPane.showMessageDialog(null, "Room Already booked for the requested date!! Select another room !!");
                return;
            }
            }
        }
        
        SurgeryOperationWorkRequest surRequest = (SurgeryOperationWorkRequest) request;
        surRequest.setAllotedOperatingRoom(String.valueOf(room.getRoomNo()));
        
        room.setNextBookedForDate(surRequest.getRequestDate());
        room.setBookedForDoctor(surRequest.getSender().getEmployee().getName());
        room.setBookedForOperationType(surRequest.getMessage());
        room.setBookedStatus(OperatingRoom.bookedStatusType.BOOKED.getValue());
        
        room.createNewDeviceBookingHistoryArraylist();
        room.addBookingDateinBookingHistory(surRequest.getRequestDate(), surRequest.getMessage(), surRequest.getSender().getEmployee().getName());

        JOptionPane.showMessageDialog(null,"Operating Room Assigned for opearation");
        
        populateRequestTable();
        populateOperatingRoomTable();
    }//GEN-LAST:event_assignOperatingRoomjButton1ActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignOperatingRoomjButton1;
    private javax.swing.JButton backJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable operatingRoomjTable1;
    private javax.swing.JButton refreshjButton1;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
