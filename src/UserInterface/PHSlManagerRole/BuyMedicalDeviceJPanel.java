/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UserInterface.PHSlManagerRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.Enterprise.EnterpriseType;
import Business.Enterprise.HospitalEnterprise;
import Business.Enterprise.PHSenterprise;
import Business.Enterprise.SupplierEnterprise;
import Business.Enterprise.WarehouseEnterprise;
import Business.Network.Network;
import Business.Order.MasterOrderCatalog;
import Business.Order.Order;
import Business.Order.OrderItem;
import Business.Organization.CareTeamOrganization;
import Business.Organization.Organization;
import Business.Organization.SupplierOrganization;
import Business.Organization.WarehouseOrganization;
import Business.Supplier.MedicalDevice;
import Business.Supplier.Supplier;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nirav gupta
 */
public class BuyMedicalDeviceJPanel extends javax.swing.JPanel {

    /**
     * Creates new form BuyMedicalDeviceJPanel
     */
    JPanel userProcessContainer; 
    EcoSystem system;
    Order order;
    MasterOrderCatalog moc;
    Enterprise enterprise;
    Organization organization;
    private static int newDeviceId = 0;
    
    public BuyMedicalDeviceJPanel(JPanel userProcessContainer, Enterprise enterprise, Organization organization, EcoSystem system) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.system=system;
        this.enterprise=enterprise;
        this.organization=organization;
        
        //moc = new MasterOrderCatalog();
        //populateMedicalDeviceTable();
        populateEnterpriseCombo();
        populateSupplierCombo();
        PHSenterprise phsEnt = (PHSenterprise) enterprise;
        availableFundsjTextField1.setText(String.valueOf(phsEnt.getAvailableFunds()));
        viewInvoicejButton1.setEnabled(false);
    }

    public void populateSupplierCombo(){
        supplierjComboBox1.removeAllItems();
        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise3 : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise3.getEnterpriseType().getValue().equalsIgnoreCase("Supplier")) {
                    for (Organization o : enterprise3.getOrganizationDirectory().getOrganizationList()) {
                        if (o.getName().equalsIgnoreCase("Supplier Organization")) {
                            SupplierOrganization suppOrg = (SupplierOrganization) o;
                            for (Supplier s : suppOrg.getSupplierDirectory().getSupplierDict()) {
                                if (s.getEnrollmentStatus().equalsIgnoreCase(Supplier.enrollmentStatusType.ENROLLED.getValue())){
                                supplierjComboBox1.addItem(s);
                               }
                            }
                        }
                    }
                }
            }
        }
    }


    public void populateMedicalDeviceTable(){
        
        DefaultTableModel dtm = (DefaultTableModel) medicalDevicejTable1.getModel();
        dtm.setRowCount(0);
        
        Supplier sup = (Supplier) supplierjComboBox1.getSelectedItem();
        if (sup != null) {
            for (MedicalDevice md : sup.getProductCatalog().getProductCatalog()) {
                Object[] row = new Object[8];
                row[0] = md;
                row[1] = md.getDeviceType();
                row[2] = md.getModelNumber();
                row[3] = md.getDeviceID();
                row[4] = md.getManufactureDate();
                row[5] = md.getAvailability();
                row[6] = sup.getSupplyName();
                row[7] = md.getPurchaseCost();
                dtm.addRow(row);
            }
        }
    }
    
    public void populateEnterpriseCombo(){
        enterpriseLocationjComboBox1.removeAllItems();
        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise2 : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (!enterprise2.getEnterpriseType().getValue().equals(EnterpriseType.Supplier.getValue())) {
                    if (!enterprise2.getEnterpriseType().getValue().equals(EnterpriseType.PHSenterprise.getValue())) {
                        enterpriseLocationjComboBox1.addItem(enterprise2);
                    }
                }
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        medicalDevicejTable1 = new javax.swing.JTable();
        jSpinner1 = new javax.swing.JSpinner();
        buyMedicalDevicejButton1 = new javax.swing.JButton();
        enterpriseLocationjComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();
        refreshjButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        availableFundsjTextField1 = new javax.swing.JTextField();
        supplierjComboBox1 = new javax.swing.JComboBox();
        viewInvoicejButton1 = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("BUY MEDICAL DEVICE ");

        medicalDevicejTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Device Name", "Type", "Model No", "ID", "Manufacture Date", "Availability", "Supplier", "Cost "
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(medicalDevicejTable1);
        if (medicalDevicejTable1.getColumnModel().getColumnCount() > 0) {
            medicalDevicejTable1.getColumnModel().getColumn(0).setResizable(false);
            medicalDevicejTable1.getColumnModel().getColumn(1).setResizable(false);
            medicalDevicejTable1.getColumnModel().getColumn(2).setResizable(false);
            medicalDevicejTable1.getColumnModel().getColumn(3).setResizable(false);
            medicalDevicejTable1.getColumnModel().getColumn(4).setResizable(false);
            medicalDevicejTable1.getColumnModel().getColumn(5).setResizable(false);
            medicalDevicejTable1.getColumnModel().getColumn(6).setResizable(false);
            medicalDevicejTable1.getColumnModel().getColumn(7).setResizable(false);
        }

        buyMedicalDevicejButton1.setBackground(new java.awt.Color(0, 153, 102));
        buyMedicalDevicejButton1.setText("Buy Medical Device");
        buyMedicalDevicejButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyMedicalDevicejButton1ActionPerformed(evt);
            }
        });

        enterpriseLocationjComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("New Location of medical device:");

        jLabel3.setText("Quantity:");

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        refreshjButton2.setText("Refresh");
        refreshjButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshjButton2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Available Funds:");

        availableFundsjTextField1.setBackground(new java.awt.Color(204, 255, 255));
        availableFundsjTextField1.setEnabled(false);

        supplierjComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        supplierjComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierjComboBox1ActionPerformed(evt);
            }
        });

        viewInvoicejButton1.setBackground(new java.awt.Color(0, 153, 102));
        viewInvoicejButton1.setText("View Invoice >>");
        viewInvoicejButton1.setEnabled(false);
        viewInvoicejButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewInvoicejButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87)
                        .addComponent(jLabel4)
                        .addGap(26, 26, 26)
                        .addComponent(availableFundsjTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 739, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(backJButton)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(0, 0, Short.MAX_VALUE)
                                    .addComponent(buyMedicalDevicejButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(57, 57, 57)
                                    .addComponent(viewInvoicejButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(90, 90, 90)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(237, 237, 237)
                        .addComponent(jLabel2)
                        .addGap(52, 52, 52)
                        .addComponent(enterpriseLocationjComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(supplierjComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(142, 142, 142)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(refreshjButton2)
                .addGap(65, 65, 65))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(refreshjButton2)
                            .addComponent(supplierjComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(availableFundsjTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterpriseLocationjComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buyMedicalDevicejButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewInvoicejButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addComponent(backJButton)
                .addGap(27, 27, 27))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buyMedicalDevicejButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyMedicalDevicejButton1ActionPerformed
        
        int row = medicalDevicejTable1.getSelectedRow();
        
        if(row<0) {
            JOptionPane.showMessageDialog(null, "Please select a row from Device Table");
            return;
        }
        
        MedicalDevice md = (MedicalDevice)medicalDevicejTable1.getValueAt(row, 0);

        int quantity = (Integer)jSpinner1.getValue();
        
        if(quantity <= 0){
            JOptionPane.showMessageDialog(null, "Invalid quantity. Please select quantity greater than ZERO");
            return;
        } 
        
        if ( quantity > md.getAvailability() ){
            JOptionPane.showMessageDialog(null, "Invalid quantity. Please select quantity less than available quantity");
            return;
        }
        
        
        int orderValue = md.getPurchaseCost() * quantity;
        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise4 : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise4 instanceof PHSenterprise) {
                    PHSenterprise phsEnt = (PHSenterprise) enterprise4;
                    if (phsEnt.getAvailableFunds() < orderValue) {
                        JOptionPane.showMessageDialog(null, "Funds available are less then order value");
                        return;
                    }

                }
            }
        }
        
        
         int reply = JOptionPane.showConfirmDialog(null,"BUY DEVICE???", "!!! BUY DEVICE !!!", JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION){
                
            
        
        order = new Order();
        OrderItem orderItem = order.addOrderItem();
        
        Date date = new Date();
        order.setOrderDate(date);
        order.setCustomerName(((PHSenterprise) enterprise).getName());
        order.getInvoice().setBoughtDeviceName(md.getDeviceName());
        order.getInvoice().setPaidStatus("Paid");
        order.getInvoice().setTotalOrderAmount(orderValue);
        
        enterprise.getMasterOrderCatalog().addOrder(order);
        
        md.setAvailability(md.getAvailability() - quantity);
            
        for (Network n : system.getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                if (e instanceof SupplierEnterprise ) {
                    for (Organization o : e.getOrganizationDirectory().getOrganizationList()) {
                        if (o.getName().equalsIgnoreCase("Supplier Organization")) {
                            SupplierOrganization suppOrg = (SupplierOrganization) o;
                            for (Supplier supp : suppOrg.getSupplierDirectory().getSupplierDict()) {
                                if (supp.getUsername().equalsIgnoreCase(md.getManufacturerName())) {
                                    e.getMasterOrderCatalog().addOrder(order);
                                }
                            }
                        }
                    }
                }
            }
        }       
            
            
            Enterprise selectedEnterprise = (Enterprise) enterpriseLocationjComboBox1.getSelectedItem();
            if (selectedEnterprise.getEnterpriseType().getValue().equals(EnterpriseType.Hospital.getValue())){
                HospitalEnterprise hospEnt = (HospitalEnterprise) selectedEnterprise;
                for (Organization o : hospEnt.getOrganizationDirectory().getOrganizationList()){
                    if (o.getName().equalsIgnoreCase("Care Team Organization")){
                        for (int i = 0; i < quantity; i ++){
                        
                        CareTeamOrganization cto = (CareTeamOrganization) o;
                        MedicalDevice md1 = cto.getMedicalDeviceCatalog().addProduct();
                        md1.setDeviceName(md.getDeviceName());
                        md1.setDeviceType(md.getDeviceType());
                        md1.setModelNumber(md.getModelNumber());
                        md1.setPurchaseCost(md.getPurchaseCost()); 
                        md1.setManufactureDate(md.getManufactureDate());
                        md1.setNextMaitainenceDueDate(md.getNextMaitainenceDueDate());
                        md1.setWarrantyExpirationDate(md.getWarrantyExpirationDate());
                        md1.setCurrentLocation(hospEnt.getName());
                        md1.setCurrentDeviceOwner(hospEnt.getName());
                        md1.setManufacturerName(md.getManufacturerName());
                        md1.setDeviceStatus(MedicalDevice.devicebookedStatusType.AVAILABLE.getValue());
                        md1.setAvailability(1);
                        md1.setPurchaseDate(date);
                        md1.setFailureCount(0);
                        md1.setDeviceID(newDeviceId++);
                        md1.setFailureProbablility(0);
                        orderItem.setMedicalDevice(md1);
                        orderItem.setQuantity(quantity);

                        }
                    }
                }
                
                order.setCustomerName(hospEnt.getName());
            }else if (selectedEnterprise.getEnterpriseType().getValue().equals(EnterpriseType.WareHouse.getValue())){
                WarehouseEnterprise warehouseEnt = (WarehouseEnterprise) selectedEnterprise;
                for (Organization o : warehouseEnt.getOrganizationDirectory().getOrganizationList()){
                    if (o.getName().equalsIgnoreCase("Warehouse Organization")){
                        for (int i = 0; i < quantity; i ++){
                            
                        WarehouseOrganization who = (WarehouseOrganization) o;
                        MedicalDevice md1 = who.getMedicalDeviceCatalog().addProduct();
                        
                        md1.setDeviceName(md.getDeviceName());
                        md1.setDeviceType(md.getDeviceType());
                        md1.setModelNumber(md.getModelNumber());
                        md1.setPurchaseCost(md.getPurchaseCost());    
                        md1.setManufactureDate(md.getManufactureDate());
                        md1.setNextMaitainenceDueDate(md.getNextMaitainenceDueDate());
                        md1.setWarrantyExpirationDate(md.getWarrantyExpirationDate());
                        md1.setCurrentLocation(warehouseEnt.getName());
                        md1.setCurrentDeviceOwner(who.getName());
                        md1.setManufacturerName(md.getManufacturerName());
                        md1.setDeviceStatus(MedicalDevice.devicebookedStatusType.AVAILABLE.getValue());
                        md1.setAvailability(1);
                        md1.setPurchaseDate(date);
                        md1.setFailureCount(0);
                        md1.setDeviceID(newDeviceId++);
                        md1.setFailureProbablility(0);
                        orderItem.setMedicalDevice(md1);
                        orderItem.setQuantity(quantity);
                        
                        }
                    }
                }
                
            }

            JOptionPane.showMessageDialog(null, "Device Bought !!!!");
 
            populateMedicalDeviceTable();
            
            PHSenterprise phsEnt = (PHSenterprise) enterprise;
            phsEnt.setAvailableFunds(phsEnt.getAvailableFunds()-orderValue);
            availableFundsjTextField1.setText(String.valueOf(phsEnt.getAvailableFunds()));
            viewInvoicejButton1.setEnabled(true);
            
            }else{
                return;
            }
    }//GEN-LAST:event_buyMedicalDevicejButton1ActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void refreshjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshjButton2ActionPerformed
        populateMedicalDeviceTable();
    }//GEN-LAST:event_refreshjButton2ActionPerformed

    private void supplierjComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierjComboBox1ActionPerformed
        populateMedicalDeviceTable();
    }//GEN-LAST:event_supplierjComboBox1ActionPerformed

    private void viewInvoicejButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewInvoicejButton1ActionPerformed
        ViewInvoice invoice = new ViewInvoice(userProcessContainer,enterprise,organization, system, order);
        userProcessContainer.add("invoice", invoice);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_viewInvoicejButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField availableFundsjTextField1;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton buyMedicalDevicejButton1;
    private javax.swing.JComboBox enterpriseLocationjComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTable medicalDevicejTable1;
    private javax.swing.JButton refreshjButton2;
    private javax.swing.JComboBox supplierjComboBox1;
    private javax.swing.JButton viewInvoicejButton1;
    // End of variables declaration//GEN-END:variables
}
