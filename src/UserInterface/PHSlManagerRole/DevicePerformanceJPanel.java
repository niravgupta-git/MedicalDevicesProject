/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UserInterface.PHSlManagerRole;


import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Order.Order;
import Business.Organization.CareTeamOrganization;
import Business.Organization.Organization;
import Business.Organization.WarehouseOrganization;
import Business.Supplier.MedicalDevice;
import Business.Supplier.MedicalDeviceCatalog;
import Business.Supplier.Supplier;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author nirav gupta
 */
public class DevicePerformanceJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SalesPerformanceJPanel
     */
     
    JPanel userProcessContainer;
    Enterprise enterprise; 
    Organization organization; 
    EcoSystem system; 
    
    public DevicePerformanceJPanel(JPanel userProcessContainer, Enterprise enterprise, Organization organization, EcoSystem system) {
        initComponents();

        this.userProcessContainer=userProcessContainer;
        this.system=system;
        this.enterprise=enterprise;
        this.organization=organization;
        populateDeviceJtable();
    }

   
    public void populateDeviceJtable(){
        
        DefaultTableModel dtm = (DefaultTableModel) devicejTable1.getModel();
        dtm.setRowCount(0);
   
        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise2 : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (!enterprise2.getEnterpriseType().getValue().equalsIgnoreCase("Supplier")) {
                    for (Organization o : enterprise2.getOrganizationDirectory().getOrganizationList()) {
                        if (o.getName().equalsIgnoreCase("Warehouse Organization")) {
                            WarehouseOrganization whOrg = (WarehouseOrganization) o;
                            for (MedicalDevice md : whOrg.getMedicalDeviceCatalog().getProductCatalog()) {
                                    Object[] row = new Object[6];
                                    row[0] = md;
                                    row[1] = md.getDeviceType();
                                    row[2] = md.getDeviceID();
                                    row[3] = md.getDeviceUsageCount();
                                    row[4] = md.getFailureCount();
                                    row[5] = md.calculateFailureProbability();
                                    dtm.addRow(row);
        
                            }
                        }
                        if (o.getName().equalsIgnoreCase("Care Team Organization")) {
                            CareTeamOrganization ctOrg = (CareTeamOrganization) o;
                            for (MedicalDevice md : ctOrg.getMedicalDeviceCatalog().getProductCatalog()) {
                                Object[] row = new Object[6];
                                    row[0] = md;
                                    row[1] = md.getDeviceType();
                                    row[2] = md.getDeviceID();
                                    row[3] = md.getDeviceUsageCount();
                                    row[4] = md.getFailureCount();
//                                    double prob =0;
//                                    if (md.getDeviceUsageCount()==0){
//                                        prob =0;
//                                    }else{
//                                    prob = (md.getFailureCount()/md.getDeviceUsageCount())*100;
//                                    }
                                    row[5] = md.calculateFailureProbability();
                                    dtm.addRow(row);

                            }
                        }
                    }
                }
            }
        }

    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        backjButton4 = new javax.swing.JButton();
        deviceUsageGraphJButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        devicejTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Device Performance");

        backjButton4.setText("<< Back");
        backjButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButton4ActionPerformed(evt);
            }
        });

        deviceUsageGraphJButton1.setBackground(new java.awt.Color(51, 255, 51));
        deviceUsageGraphJButton1.setText("View Device Usage Graph");
        deviceUsageGraphJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deviceUsageGraphJButton1ActionPerformed(evt);
            }
        });

        devicejTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Device Name", "Type", "ID", "Usage Count", "Failure Count", "Failure Probability %"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(devicejTable1);

        jButton1.setText("Refresh");

        jButton2.setBackground(new java.awt.Color(51, 255, 0));
        jButton2.setText("Usasge Trend Graph");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(224, 224, 224)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(85, 85, 85))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(backjButton4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(245, 245, 245)
                        .addComponent(deviceUsageGraphJButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(98, 98, 98)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel1)
                        .addGap(48, 48, 48))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)
                        .addGap(36, 36, 36)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deviceUsageGraphJButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(75, 75, 75)
                .addComponent(backjButton4)
                .addContainerGap(46, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backjButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButton4ActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backjButton4ActionPerformed

    private void deviceUsageGraphJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deviceUsageGraphJButton1ActionPerformed
        int selectedDevice = devicejTable1.getSelectedRow();
        
        if (selectedDevice < 0){
            JOptionPane.showMessageDialog(null, "Please select row from both Device table ");
            return;
        }
        
        MedicalDevice device = (MedicalDevice) devicejTable1.getValueAt(selectedDevice, 0);
            
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            dataset.setValue(device.getDeviceUsageCount(), "Values", "USAGE COUNT");
            dataset.setValue(device.getFailureCount(), "Values", "FAILURE COUNT");
            dataset.setValue(device.getFailureProbablility(), "Values", "FAILURE PROBABILITY");
            JFreeChart chart = ChartFactory.createBarChart("DEVICE PERFORMANCE", "Performance Attributes", "Performance Values", dataset, PlotOrientation.VERTICAL, false, true, false);
            CategoryPlot p = chart.getCategoryPlot();
            p.setRangeGridlinePaint(Color.BLACK);
            ChartFrame frame = new ChartFrame("new frame for sales performance", chart);
            frame.setVisible(true);
            frame.setSize(450, 350);
        
    }//GEN-LAST:event_deviceUsageGraphJButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backjButton4;
    private javax.swing.JButton deviceUsageGraphJButton1;
    private javax.swing.JTable devicejTable1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
