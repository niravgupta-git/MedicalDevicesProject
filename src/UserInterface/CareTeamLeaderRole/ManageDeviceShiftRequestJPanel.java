/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UserInterface.CareTeamLeaderRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.WarehouseEnterprise;
import Business.Network.Network;
import Business.Organization.CareTeamOrganization;
import Business.Organization.Organization;
import Business.Organization.WarehouseOrganization;
import Business.Supplier.MedicalDevice;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.GetDeviceFromOtherEnterpriseRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nirav gupta
 */
public class ManageDeviceShiftRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageDeviceShiftRequestJPanel
     */
    JPanel userProcessContainer; UserAccount account; Enterprise enterprise; Organization organization; EcoSystem system;
    
    public ManageDeviceShiftRequestJPanel(JPanel userProcessContainer, UserAccount account, Enterprise enterprise, Organization organization, EcoSystem system) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.enterprise=enterprise;
        this.account=account;
        this.organization=organization;
        this.system=system;
        populateRequestTable();
    }

    public void populateRequestTable(){
            DefaultTableModel model = (DefaultTableModel) requestjTable1.getModel();
            model.setRowCount(0);

            for (Network n : system.getNetworkList()) {
                for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e instanceof WarehouseEnterprise) {
                        for (Organization org : e.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof WarehouseOrganization) {
                                for (WorkRequest request : org.getWorkQueue().getWorkRequestList()) {
                                    if (request instanceof GetDeviceFromOtherEnterpriseRequest){
                                      if (((GetDeviceFromOtherEnterpriseRequest) request).getDeviceRequiredAtHospital().equalsIgnoreCase(enterprise.getName())){
                                    Object[] row = new Object[9];
                                    row[0] = request;
                                    row[1] = request.getSender();
                                    row[2] = request.getRequestDate();
                                    row[3] = ((GetDeviceFromOtherEnterpriseRequest) request).getRequiredMedicalDeviceType();
                                    row[4] = ((GetDeviceFromOtherEnterpriseRequest) request).getAssignedMedicalDeviceType();
                                    row[5] = ((GetDeviceFromOtherEnterpriseRequest) request).getDeviceRequiredAtHospital();
                                    row[6] = ((GetDeviceFromOtherEnterpriseRequest) request).getDeviceCurrentLocation();
                                    row[7] = ((GetDeviceFromOtherEnterpriseRequest) request).getDeviceShippingStatus();
                                    row[8] = ((GetDeviceFromOtherEnterpriseRequest) request).getEstimatedDeliveryDate();
                                    model.addRow(row);
                                     }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        requestjTable1 = new javax.swing.JTable();
        acceptDeviceandUpdateInventoryjButton1 = new javax.swing.JButton();
        refreshjButton1 = new javax.swing.JButton();
        backjButton4 = new javax.swing.JButton();
        closejButton1 = new javax.swing.JButton();

        jLabel1.setText("MANAGE DEVICE SHIFT REQUESTS");

        requestjTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Sender", "Date", "Required Device", "Assigned Device Type", "Location required", "Current Location", "Shipping status", "Delivery date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(requestjTable1);

        acceptDeviceandUpdateInventoryjButton1.setBackground(new java.awt.Color(51, 255, 204));
        acceptDeviceandUpdateInventoryjButton1.setText("Accept Device and Update Inventory");
        acceptDeviceandUpdateInventoryjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptDeviceandUpdateInventoryjButton1ActionPerformed(evt);
            }
        });

        refreshjButton1.setText("Refresh");
        refreshjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshjButton1ActionPerformed(evt);
            }
        });

        backjButton4.setText("<<Back");
        backjButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButton4ActionPerformed(evt);
            }
        });

        closejButton1.setBackground(new java.awt.Color(51, 255, 204));
        closejButton1.setText("Close Request");
        closejButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closejButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(266, 266, 266)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(refreshjButton1)
                .addGap(86, 86, 86))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 697, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(acceptDeviceandUpdateInventoryjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(closejButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(backjButton4)))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(refreshjButton1))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(acceptDeviceandUpdateInventoryjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closejButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(backjButton4)
                .addGap(31, 31, 31))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void acceptDeviceandUpdateInventoryjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptDeviceandUpdateInventoryjButton1ActionPerformed
        
        int selectedRequest = requestjTable1.getSelectedRow();

        if (selectedRequest < 0 ){
            JOptionPane.showMessageDialog(null, "Please select a row from request table");
            return;
        }
        
        WorkRequest request = (WorkRequest)requestjTable1.getValueAt(selectedRequest, 0);
        
        GetDeviceFromOtherEnterpriseRequest deviceShiftequest = (GetDeviceFromOtherEnterpriseRequest) request;
        
        if (deviceShiftequest.getAssignedMedicalDeviceType()==null){
            JOptionPane.showMessageDialog(null, "ERROR: Device not yet assigned and shipped for the request!!");
            return;
        }
        
        if (request.getStatus().equalsIgnoreCase("Resolved")){
            JOptionPane.showMessageDialog(null, "ERROR: Request is alreasy resolved!!");
            return;
        }
        
        deviceShiftequest.setDeviceShippingStatus(GetDeviceFromOtherEnterpriseRequest.deviceShippingStatus.DELIVERED.getValue());
        deviceShiftequest.setDeviceCurrentLocation(enterprise.getName());
        
        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise2 : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise2.getName().equalsIgnoreCase(deviceShiftequest.getDeviceRequiredAtHospital())) {
                    for (Organization o : enterprise2.getOrganizationDirectory().getOrganizationList()) {
                        if (o.getName().equalsIgnoreCase("Care Team Organization")) {
                            CareTeamOrganization ctOrg = (CareTeamOrganization) o;
                            MedicalDevice md1 = ctOrg.getMedicalDeviceCatalog().addProduct();

                            md1.setDeviceName(deviceShiftequest.getAssignedDevice().getDeviceName());
                            md1.setDeviceType(deviceShiftequest.getAssignedDevice().getDeviceType());
                            md1.setModelNumber(deviceShiftequest.getAssignedDevice().getModelNumber());
                            md1.setPurchaseCost(deviceShiftequest.getAssignedDevice().getPurchaseCost());
                            md1.setManufactureDate(deviceShiftequest.getAssignedDevice().getManufactureDate());
                            md1.setNextMaitainenceDueDate(deviceShiftequest.getAssignedDevice().getNextMaitainenceDueDate());
                            md1.setWarrantyExpirationDate(deviceShiftequest.getAssignedDevice().getWarrantyExpirationDate());
                            md1.setCurrentLocation(enterprise2.getName());
                            md1.setDeviceStatus(MedicalDevice.devicebookedStatusType.AVAILABLE.getValue());
                            md1.setAvailability(1);
                            md1.setDeviceFailureList(deviceShiftequest.getAssignedDevice().getDeviceFailureList());
                            md1.setDeviceUsageCount(deviceShiftequest.getAssignedDevice().getDeviceUsageCount());
                            md1.setFailureProbablility(deviceShiftequest.getAssignedDevice().getFailureProbablility());
                            md1.setFailureCount(deviceShiftequest.getAssignedDevice().getFailureCount());
                            md1.setPurchaseDate(deviceShiftequest.getAssignedDevice().getPurchaseDate());
                            request.setStatus("Resolved");
                        }
                    }
                }
            }
        }
        
        JOptionPane.showMessageDialog(null, "Device Accepted and Updated in Inventory !!! ");
    }//GEN-LAST:event_acceptDeviceandUpdateInventoryjButton1ActionPerformed

    private void refreshjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshjButton1ActionPerformed
        populateRequestTable();
    }//GEN-LAST:event_refreshjButton1ActionPerformed

    private void backjButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButton4ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backjButton4ActionPerformed

    private void closejButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closejButton1ActionPerformed
        int selectedRequest = requestjTable1.getSelectedRow();
        
        if (selectedRequest < 0 ){
            JOptionPane.showMessageDialog(null, "Please select a row from request table");
            return;
        }
        
        WorkRequest request = (WorkRequest)requestjTable1.getValueAt(selectedRequest, 0);
        GetDeviceFromOtherEnterpriseRequest deviceShiftequest22 = (GetDeviceFromOtherEnterpriseRequest) request;
        
        if (deviceShiftequest22.getAssignedMedicalDeviceType()==null){
            JOptionPane.showMessageDialog(null, "Request is not yet resolved by warehouse!!");
            return;
        }
        
        int reply = JOptionPane.showConfirmDialog(null, "ARE YOU SURE TO CLOSE REQUEST???", "!!! CLOSE REQUEST !!!", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
        for (Network n : system.getNetworkList()) {
                for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e instanceof WarehouseEnterprise) {
                        for (Organization org : e.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof WarehouseOrganization) {
                                org.getWorkQueue().getWorkRequestList().remove(request);
                            }
                        }
                    }
                }
            }
        }
        JOptionPane.showMessageDialog(null, "Request closed!!");
        populateRequestTable();
    }//GEN-LAST:event_closejButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptDeviceandUpdateInventoryjButton1;
    private javax.swing.JButton backjButton4;
    private javax.swing.JButton closejButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton refreshjButton1;
    private javax.swing.JTable requestjTable1;
    // End of variables declaration//GEN-END:variables
}
