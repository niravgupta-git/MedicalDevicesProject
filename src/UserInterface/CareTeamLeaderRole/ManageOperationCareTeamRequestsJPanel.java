/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UserInterface.CareTeamLeaderRole;

import Business.CareTeam.CareTeamMember;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.CareTeamOrganization;
import Business.Organization.Organization;
import Business.Role.CareTeamMemberRole;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.SurgeryOperationWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nirav gupta
 */
public class ManageOperationCareTeamRequestsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageOperationCareTeamRequestsJPanel
     */
    JPanel userProcessContainer;
    UserAccount account;
    Enterprise enterprise;
    Organization organization;
    EcoSystem system;
    
    public ManageOperationCareTeamRequestsJPanel(JPanel userProcessContainer, UserAccount account, Enterprise enterprise, Organization organization, EcoSystem system) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.account=account;
        this.system=system;
        this.enterprise=enterprise;
        this.organization=organization;
        populateCareTeamTable();
        populateRequestTable();
    }

    public void populateRequestTable(){
            DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
            model.setRowCount(0);
            
                        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof CareTeamOrganization) {
                                for (WorkRequest request : org.getWorkQueue().getWorkRequestList()) {
                                    Object[] row = new Object[6];
                                    row[0] = request;
                                    row[1] = request.getReceiver();
                                    row[2] = request.getRequestDate();
                                    row[3] = ((SurgeryOperationWorkRequest) request).getRequiredCareTeamSize();
                                    row[4] = ((SurgeryOperationWorkRequest) request).getAssignedTeamSize();
                                    row[5] =  request.getStatus();
                                    model.addRow(row);
                                    
                                }
                            }
                        }     
        }

    public void populateCareTeamTable(){
        
        DefaultTableModel dtm = (DefaultTableModel) careTeamMemberjTable2.getModel();
    dtm.setRowCount(0);
        
                    for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (org instanceof CareTeamOrganization){
                            CareTeamOrganization ctOrg = (CareTeamOrganization) org;
                            for (CareTeamMember ctm : ctOrg.getCareTeamDirectory().getCareTeamMemberList()) {
                                if (ctm.getRole() instanceof CareTeamMemberRole){
                                Object[] row = new Object[5];
                                row[0] = ctm;
                                row[1] = ctm.getSpeciality();
                                row[2] = ctm.getAvailabilityStatus();
                                row[3] = ctm.getCurrentVacantStatus();
                                row[4] = ctm.getNextScheduledActivityDate();
                                dtm.addRow(row);
                                }
                            }
                        }
                    }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable(){

        };
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        careTeamMemberjTable2 = new javax.swing.JTable();
        assignTeamMemberjButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Receiver", "Request Date", "Requested Team Size", "Assigned Team Size", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("MANAGE CARE TEAM FOR OPERATION");

        careTeamMemberjTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Care Member Name", "Speciality", "Availability", "Status", "Next Scheduled date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(careTeamMemberjTable2);

        assignTeamMemberjButton2.setBackground(new java.awt.Color(51, 255, 204));
        assignTeamMemberjButton2.setText("Assign Team Member for Operation");
        assignTeamMemberjButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignTeamMemberjButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(266, 266, 266)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(79, 79, 79))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(backJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(258, 258, 258)
                        .addComponent(assignTeamMemberjButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 688, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(assignTeamMemberjButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignTeamMemberjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignTeamMemberjButton2ActionPerformed

        int selectedRequest2 = workRequestJTable.getSelectedRow();
        int selectedCareTeamMember = careTeamMemberjTable2.getSelectedRow();
        if (selectedRequest2 < 0 || selectedCareTeamMember < 0){
            JOptionPane.showMessageDialog(null, "Please select row from both Request and team Member table ");
            return;
        }

        WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRequest2, 0);
        CareTeamMember ctm = (CareTeamMember) careTeamMemberjTable2.getValueAt(selectedCareTeamMember, 0);

        SurgeryOperationWorkRequest surRequest = (SurgeryOperationWorkRequest) request;

        if(surRequest.getRequiredCareTeamSize() == 0) {
            JOptionPane.showMessageDialog(null, "Team members already allotted");
            return;
        }
        
        if(ctm.getAvailabilityStatus()==null) {
             JOptionPane.showMessageDialog(null, "Member not have not updated profile for scheduling");
            return;
        }
        
        if(ctm.getAvailabilityStatus().equalsIgnoreCase(CareTeamMember.availabilityStatusType.AVAILABLE.getValue())) {
        int assgignedCount = surRequest.getAssignedTeamSize();
        int requestedCount = surRequest.getRequiredCareTeamSize();

        assgignedCount = assgignedCount + 1;
        requestedCount = requestedCount - 1;

        surRequest.setAssignedTeamSize(assgignedCount);
        surRequest.setRequiredCareTeamSize(requestedCount);
        surRequest.getCareTeamDirectory().addCareTeamMemberAsSpecified(ctm);

        ctm.setAvailabilityStatus(CareTeamMember.availabilityStatusType.SCHEDULED.getValue());
        ctm.setNextScheduledActivityDate(surRequest.getOperationDate());

        JOptionPane.showMessageDialog(null,"Team Member Added for operation");
        }else{
            JOptionPane.showMessageDialog(null, "Member not available for scheduling");
            return;
        }
        
        populateRequestTable();
        populateCareTeamTable();
    }//GEN-LAST:event_assignTeamMemberjButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        populateCareTeamTable();
        populateRequestTable();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignTeamMemberjButton2;
    private javax.swing.JButton backJButton;
    private javax.swing.JTable careTeamMemberjTable2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
