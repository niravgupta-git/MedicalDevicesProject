/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UserInterface.CareTeamLeaderRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.CareTeamOrganization;
import Business.Organization.Organization;
import Business.Schedule.DeviceBookingHistory;
import Business.Supplier.MedicalDevice;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nirav gupta
 */
public class ViewDeviceUsageTrendsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewDeviceUsageTrendsJPanel
     */
    JPanel userProcessContainer; UserAccount account; Enterprise enterprise; Organization organization; EcoSystem system;
    
    public ViewDeviceUsageTrendsJPanel(JPanel userProcessContainer, UserAccount account, Enterprise enterprise, Organization organization, EcoSystem system) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.system=system;
        this.account=account;
        this.enterprise=enterprise;
        this.organization=organization;
        populateDeviceTable();
    }

    

    public void populateDeviceTable(){
       
    DefaultTableModel dtm = (DefaultTableModel) devicejTable1.getModel();
    dtm.setRowCount(0);

                    for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (org instanceof CareTeamOrganization){
                            CareTeamOrganization ctOrg = (CareTeamOrganization) org;
                            for (MedicalDevice md : ctOrg.getMedicalDeviceCatalog().getProductCatalog()) {
                                Object[] row = new Object[8];
                                row[0] = md;
                                row[1] = md.getDeviceType();
                                row[2] = md.getDeviceID();
                                row[3] = md.getCurrentLocation();
                                row[4] = md.getAvailability();
                                row[5] = md.getDeviceStatus();
                                row[6] = md.getNextScheduledBookingDate();
                                row[7] = md.getNextScheduledBookingTillDate();
                                dtm.addRow(row);
                            }
                        }
                    }
    }
    
    public void populateDeviceBookingHistory(MedicalDevice md){
        
        DefaultTableModel dtm = (DefaultTableModel) deviceHistoryjTable1.getModel();
        dtm.setRowCount(0);
        
        for (DeviceBookingHistory dbh : md.getBookingHistorylist()){
            Object[] row = new Object[5];
                                row[0] = dbh.getPreviousScheduledBookingDate();
                                row[1] = dbh.getPreviousScheduledBookingTillDate();
                                row[2] = dbh.getPreviousBookingEnterprise();
                                row[3] = dbh.isFailureStatusValue();
                                row[4] = (md.getFailureCount()/md.getDeviceUsageCount())*100;
                                dtm.addRow(row);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        devicejTable1 = new javax.swing.JTable();
        viewUsageHistoryjButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        deviceHistoryjTable1 = new javax.swing.JTable();
        backJButton = new javax.swing.JButton();
        refreshjButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        deviceUsageCountjTextField1 = new javax.swing.JTextField();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("VIEW DEVICE USAGE & TRENDS");

        devicejTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Device Name", "Type", "ID", "Location", "Availability", "Status", "Next Scheduled Date", "Booked Till Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(devicejTable1);

        viewUsageHistoryjButton1.setBackground(new java.awt.Color(51, 255, 204));
        viewUsageHistoryjButton1.setText("View Usage History");
        viewUsageHistoryjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewUsageHistoryjButton1ActionPerformed(evt);
            }
        });

        deviceHistoryjTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Booking From Date", "Booking Till Date", "Booked by", "Device Failure Status", "Failure Probability"
            }
        ));
        jScrollPane1.setViewportView(deviceHistoryjTable1);

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        refreshjButton1.setText("Refresh");
        refreshjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshjButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Device Usage Count:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(295, 295, 295)
                        .addComponent(jLabel1)
                        .addGap(228, 228, 228)
                        .addComponent(refreshjButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 639, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(315, 315, 315)
                        .addComponent(viewUsageHistoryjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 949, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(backJButton))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(372, 372, 372)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deviceUsageCountjTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(refreshjButton1))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(viewUsageHistoryjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(deviceUsageCountjTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void viewUsageHistoryjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewUsageHistoryjButton1ActionPerformed
        int selectedDevice = devicejTable1.getSelectedRow();
        
        if (selectedDevice < 0){
            JOptionPane.showMessageDialog(null, "Please select row from both Device table ");
            return;
        }
        
        MedicalDevice device = (MedicalDevice) devicejTable1.getValueAt(selectedDevice, 0);
        
        if (!(device.getBookingHistorylist() == null)){
            populateDeviceBookingHistory(device);
            deviceUsageCountjTextField1.setText(String.valueOf(device.getDeviceUsageCount()));
        }else{
            DefaultTableModel dtm = (DefaultTableModel) deviceHistoryjTable1.getModel();
            dtm.setRowCount(0);
            deviceUsageCountjTextField1.removeAll();
        }
    }//GEN-LAST:event_viewUsageHistoryjButton1ActionPerformed

    private void refreshjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshjButton1ActionPerformed
        populateDeviceTable();
    }//GEN-LAST:event_refreshjButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JTable deviceHistoryjTable1;
    private javax.swing.JTextField deviceUsageCountjTextField1;
    private javax.swing.JTable devicejTable1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton refreshjButton1;
    private javax.swing.JButton viewUsageHistoryjButton1;
    // End of variables declaration//GEN-END:variables
}
